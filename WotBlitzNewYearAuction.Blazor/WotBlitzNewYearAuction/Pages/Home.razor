@page "/"
@inject HttpClient Http;
@inject LocalStorage LocalStorage;

<PageTitle>Auction WOT Blitz</PageTitle>

<h4><a href="https://eu.wotblitz.com/en/auction/#/" class="link-light">WOT Blitz Auction</a></h4>

<p> Next price drop @TimeToNextPriceDrop </p>

@if(Auction != null && Auction.AuctionItems != null && Auction.AuctionItems.Length > 0) {
<div class="progress" style="height: 1px;">
  <div 
    class="progress-bar bg-warning" 
    role="progressbar" 
    style="width: @(@TimeUntilRequestPercent)%" 
    aria-valuenow="@TimeUntilRequest" 
    aria-valuemin="0" 
    aria-valuemax="@UpdateAuctionPeriod"></div>
</div>

<div class="d-flex flex-row flex-wrap mt-4">
@foreach(var auctionItem in Auction.AuctionItems.Where(i => i.Available && i.CurrentCount > 0).OrderBy(i => i.AvailableBefore)) {
    <div class="card mt-2 ms-2 text-center" style="width: 18rem;">
        <div class="d-flex justify-content-center mt-2">
            <TankCard Vehicle=@auctionItem.Vehicle></TankCard>
        </div>
        <div class="card-title"><b style="color: @(auctionItem.Vehicle!.IsCollectible ? CollectibleColor : (auctionItem.Vehicle!.IsPremium ? PremiumColor : "white"))">
            @auctionItem.Vehicle!.Name
            </b>
        </div>
        <table class="table table-sm table-striped table-sm" width="100%">
            <tbody>
                <tr>
                    <td align="left">Current Price</td>
                    <td align="right">
                        <span style="color: @PremiumColor">@auctionItem.Price?.PriceValue </span>
                        @PriceDrop(auctionItem.Price!.PriceValue, auctionItem.InitialPrice)
                    </td>
                </tr>
                <tr>
                    <td align="left">Available</td>
                    <td align="right"><span style="color: @AvailableColor(auctionItem.CurrentCount, auctionItem.InitialCount)">@auctionItem.CurrentCount</span> / @auctionItem.InitialCount (@AvailablePercent(auctionItem.CurrentCount, auctionItem.InitialCount)%)</td>
                </tr>
                <tr>
                    <td align="left">Available until</td>
                    <td align="right">@auctionItem.AvailableBefore.ToString("dd.MM.yy")</td>
                </tr>
                <tr>
                    <td align="left">Next price</td>
                    <td align="right"><span style="color: @PremiumColor">@auctionItem.NextPrice?.PriceValue</span></td>
                </tr>
            </tbody>
        </table>
    </div>
}
</div>
}

@code {
    public string PremiumColor => "#d4d481";
    public string CollectibleColor => "#64c8f5";

    public DateTime? NextPriceDropTime { get; set; }

    public string? TimeToNextPriceDrop { get; set; }

    public AuctionResponse? Auction { get; set; }

    private DateTime _lastAuctionUpdated = DateTime.MinValue;
    public int UpdateAuctionPeriod => 10 * 60 * 1000; // 10 mins in milliseconds
    private int _timerPeriod = 1000; // 1 second 

    public int TimeUntilRequest { get; set; }
    public int TimeUntilRequestPercent { get; set; }

    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        await ReadAuction();

        _timer = new Timer(async (Object sate) => {
            TimeToNextPriceDrop = NextPriceDrop(NextPriceDropTime);

            TimeUntilRequest = Convert.ToInt32((DateTime.Now - _lastAuctionUpdated).TotalSeconds) * 1000;
            TimeUntilRequestPercent = Convert.ToInt32(100 * Convert.ToDecimal(TimeUntilRequest) / Convert.ToDecimal(UpdateAuctionPeriod));

            if (TimeUntilRequest >= UpdateAuctionPeriod)
            {
                await ReadAuction();
            }

            StateHasChanged();
        }, new AutoResetEvent(false), 0, _timerPeriod);
    }

    private async Task ReadAuction ()
    {
        var auction = await Http.GetAuctionData();
        if (auction?.AuctionItems != null)
        {
            var initialPrices = await LocalStorage.ReadInitialPrices();
            foreach(var auctionItem in auction.AuctionItems.Where(i => i.Available && i.CurrentCount > 0))
            {
                var priceFromLocalStorage = initialPrices.FirstOrDefault(p => p.VehicleId == auctionItem.Vehicle!.Id);
                if (priceFromLocalStorage == null)
                {
                    await LocalStorage.SetInitialPrice(new InitialPrices { VehicleId = auctionItem.Vehicle!.Id, InitialPrice = auctionItem.Price!.PriceValue});
                    auctionItem.InitialPrice = auctionItem.Price!.PriceValue;
                }
                else
                {
                    auctionItem.InitialPrice = priceFromLocalStorage.InitialPrice;
                }

                if (auctionItem.NextPriceDropAt.HasValue) 
                {
                    NextPriceDropTime = auctionItem.NextPriceDropAt.Value;
                }
            }
        }
        Auction = auction;
        _lastAuctionUpdated = DateTime.Now;
    }

    public int AvailablePercent(int current, int total) 
    {
        return Convert.ToInt32(100 * (Convert.ToDecimal(current) / Convert.ToDecimal(total)));
    }

    public string AvailableColor(int current, int total)
    {
        var percent = AvailablePercent(current, total);
        return percent < 10 ? "red" : "green";
    }

    public string? NextPriceDrop(DateTime? nextDropTime) {
        if (nextDropTime == null)
        {
            return null;
        }
        var timeToNextPrice = nextDropTime - DateTime.UtcNow;
        return $" in {timeToNextPrice?.ToString(@"hh\:mm\:ss") ?? string.Empty}";
    }

    public string? PriceDrop(int currentPrice, int initialPrice)
    {
        if (currentPrice == initialPrice)
        {
            return null;
        }
        int diff = initialPrice - currentPrice;
        int diffPercent = Convert.ToInt32(100 * (Convert.ToDecimal(diff) / Convert.ToDecimal(initialPrice)));
        return $" -{diff} ({diffPercent}%)";
    }

}